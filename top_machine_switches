`timescale 1ns/1ns

module top_machine_switches (
  input  wire clk,        
  input  wire btnC,       
  input  wire [2:0] sw,    // sw[0]=Nickel, sw[1]=Dime, sw[2]=Quarter
  output wire [3:0] led
);
  // Reloj lento para interacci칩n humana
  wire slow_clk;
  wire reset_n = ~btnC;

  clockdivider u_div (
    .in_clk (clk),
    .reset_n(reset_n),
    .out_clk(slow_clk)
  );

  // Sincronizaci칩n y detecci칩n de flancos
  reg [1:0] syncN, syncD, syncQ;
  reg prevN, prevD, prevQ;

  always @(posedge slow_clk or negedge reset_n) begin
    if (!reset_n) begin
      syncN <= 2'b00; syncD <= 2'b00; syncQ <= 2'b00;
      prevN <= 1'b0;  prevD <= 1'b0;  prevQ <= 1'b0;
    end else begin
      syncN <= {syncN[0], sw[0]};
      syncD <= {syncD[0], sw[1]};
      syncQ <= {syncQ[0], sw[2]};
      prevN <= syncN[1];
      prevD <= syncD[1];
      prevQ <= syncQ[1];
    end
  end

  wire Nickel_pulse  =  syncN[1] & ~prevN;
  wire Dime_pulse    =  syncD[1] & ~prevD;
  wire Quarter_pulse =  syncQ[1] & ~prevQ;

  // Se침ales de salida
  wire Dispense, ReturnNickel, ReturnDime, ReturnTwoDimes;

  machineDispense u_fsm (
    .clk           (slow_clk),
    .reset_n       (reset_n),
    .Nickel        (Nickel_pulse),
    .Dime          (Dime_pulse),
    .Quarter       (Quarter_pulse),
    .Dispense      (Dispense),
    .ReturnNickel  (ReturnNickel),
    .ReturnDime    (ReturnDime),
    .ReturnTwoDimes(ReturnTwoDimes)
  );

  assign led[0] = Dispense;
  assign led[1] = ReturnNickel;
  assign led[2] = ReturnDime;
  assign led[3] = ReturnTwoDimes;

endmodule
